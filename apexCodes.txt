//---------Data types --------------------------
Integer barrelNumbers = 1000;
system.debug(' value of barrelNumbers variable: '+barrelNumbers);

//-----boolean-------
Boolean shipmentDispatched;
shipmentDispatched = true;
System.debug('Value of shipmentDispatched '+shipmentDispatched);

//ShipmentDate can be stored when shipment is dispatched.---datetime---
Date ShipmentDate = date.today();
System.debug('ShipmentDate '+ShipmentDate);

//-----long-----------
Long companyRevenue = 21474838973344648L;
system.debug('companyRevenue'+companyRevenue);

//-----string-------------------
String companyName = 'Abc International';
System.debug('Value companyName variable'+companyName);

//--------id----------
ID  i  = ‘b022w00000EKkeNBBO’
System.debug('ID:' + i);

//---------date----------
Date  dt  = date.today();
System.debug('Today: '+ dt);

//-----Datetime----------
DataTime  currentDT   =  DateTime.now();
System.debug('Datetime: '+ currentDT);

//----------------time---------
Time  currentT   =  DateTime.now().time();
System.debug('Time: '+ currentT);

//------------String operation----------
String str = 'i am a string variable ';
System.debug('Actual String: '+str);
// capitalize string
System.debug('Capitalize String: '+str.capitalize());
// contains example
System.debug('Contains ring? :'+ str.contains('ring'));
// convert to upper case
System.debug('Upper case: '+str.toUpperCase());
// convert to lower case
System.debug('Lower case: '+str.toLowerCase());
// equals
System.debug('Is equal to ring?: '+str.equals('ring'));
String str1 = 'Manish';
String str2 = 'maNish';
System.debug('str1 equals str2: '+str1.equals(str2));
System.debug('str1 equals str2 ignore case: '+str1.toLowerCase().equals(str2.toLowerCase()));
// remove
System.debug('Remove ring: '+str.remove('ring'));
// replace
System.debug('Replace ring: '+str.replace('ring', 'rong'));
// split
System.debug('Split by space: '+str.split(' '));

String str = 'My team\'s name is \'SFDCFacts Academy\'. \n We work on apex.';
System.debug(str);

//......................LIST.................................

List<Integer> rollNumbers = new List<Integer>{11008890, 11008100, 11007231};
System.debug(rollNumbers);

rollNumbers.add(89897767);
rollNumbers.add(89897764);
rollNumbers.add(89897765);

System.debug(rollNumbers);

// get item on index 1
Integer rollNum = rollNumbers.get(1);
System.debug(rollNum);
System.debug(rollNumbers.get(1));

// add item on index 4
rollNumbers.add(4, 99990000);
System.debug(rollNumbers);

// get the list size
System.debug(rollNumbers.size());

// remove the item on index 3
rollNumbers.remove(3);
System.debug(rollNumbers);
System.debug(rollNumbers.size());

// update item on index 1
rollNumbers.set(1, 44444444);
System.debug(rollNumbers);

// clear the list
rollNumbers.clear();
System.debug(rollNumbers);
System.debug(rollNumbers.size());

// below line will throw an error
rollNumbers.set(1, 44444444);
System.debug(rollNumbers);


//..................SET......................

Set<Integer> rollNumbers = new Set<Integer>{11008890, 11008100, 11007231};
System.debug(rollNumbers);

rollNumbers.add(89897767);
rollNumbers.add(89897764);
rollNumbers.add(89897765);

System.debug(rollNumbers);

// adding duplicate values - NOT ALLOWED
rollNumbers.add(89897767);
System.debug(rollNumbers);

// check if set has an item
System.debug(rollNumbers.contains(89897764));
System.debug(rollNumbers.contains(345345));

// delete an item
rollNumbers.remove(89897765);
System.debug(rollNumbers);

// get set size
System.debug(rollNumbers.size());

// check if set is empty
System.debug(rollNumbers.isEmpty());

// remove all items
rollNumbers.clear();
System.debug(rollNumbers.isEmpty());

//..................MAP......................
Map<Integer, String> class2020 = new Map<Integer, String>();

// add a new student/item
class2020.put(11008890, 'Manish');

System.debug(class2020);

class2020.put(11008891, 'Harry');
class2020.put(11008892, 'Rick');
class2020.put(11008893, 'Bill');

System.debug(class2020);

class2020.put(11008894, 'Bill');
System.debug(class2020);

//update/override value
class2020.put(11008894, 'Skywalker');
System.debug(class2020);

// get a value
System.debug(class2020.get(11008892));

// remove an item from map
class2020.remove(11008893);
System.debug(class2020);

// get all the keys
Set<Integer> rollNumber = class2020.keySet();
System.debug(rollNumber);

// get all the values
List<String> students = class2020.values();
System.debug(students);

// check if map has the key
System.debug(class2020.containsKey(11008892));
System.debug(class2020.containsKey(11008893));


// Constant
// Declare Constant Variable
final Decimal PI;
System.debug(PI); //prints null

// initialize variable
PI = 3.14159;
System.debug(PI);

// update variable value - NOT ALLOWED
PI = 2.14159;
System.debug(PI);

//Operators
//assignment operator
Integer x = 10;
System.debug(X);

//---------------------------------------------------------
//addition operator
x = x + 5;
System.debug(X);

//subtraction operator
x = x - 5;
System.debug(X);

//multiplication operator
x = x * 5;
System.debug(X);

//division operator
x = x / 5;
System.debug(X);

-------------------------------------------------------------------------
Integer x= 50;

//Increment operator
x++;
System.debug(x);

//Decrement operator
x--;
System.debug(x);

//addition assignment operator
x+=5;
System.debug(x);

//subtruction assignment operator
x-=5;
System.debug(x);

//division assignment operator
x*=5;
System.debug(x);

//multiplication assignment operator
x/=5;
System.debug(x);

.................................................................................
Boolean first = true;
Boolean second = false;
Boolean result;

//AND operator
result = first && second;
System.debug('AND operator: '+ result);

//OR operator
result = first || second;
System.debug('OR operator: '+ result);

//Equality operator
result = (first == second);
System.debug('Equality operator: '+ result);
result =  (5==5);
System.debug('Equality operator: '+ result);

//less than operator
result = (5<6);
System.debug('Less than operator: '+ result);

//greater than operator
result = (5>6);
System.debug('greater than operator: '+ result);

//less than equal operator
result = (5<=6);
System.debug('Less than equal operator: '+ result);

//greater than equal operator
result = (5>=6);
System.debug('greater than operator: '+ result);


// NOT operator
System.debug('Not operator before - '+ first);
first = !first;
System.debug('Not operator after - '+ first);

// Ternary operator
String greeting = '';
Integer hour = 10;
greeting = (hour < 12) ? 'Good Morning' : 'Good Afternoon';
System.debug('Ternary operator=10 - '+ greeting);
hour = 13;
greeting = (hour < 12) ? 'Good Morning' : 'Good Afternoon';
System.debug('Ternary operator 13 - '+ greeting);

//type conversion
String physicsMarks = '72';
String chemistryMarks = '64';
String mathMarks = '87';
System.debug(physicsMarks + chemistryMarks + mathMarks);
System.debug(Integer.valueOf(physicsMarks) 
             + Integer.valueOf(chemistryMarks) 
             + Integer.ValueOf(mathMarks)); 
